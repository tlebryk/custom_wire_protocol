syntax = "proto3";

package messaging;

// Define the action IDs as an enum.
enum ActionIds {
  UNKNONE = 0;
  SUCCESS = 1;
  ERROR = 2;
  ECHO = 3;
  REGISTER = 4;
  LOGIN = 5;
  SEND_MESSAGE = 6;
  RECENT_MESSAGES = 7;
  UNREAD_MESSAGES = 8;
  SET_N_UNREAD_MESSAGES = 9;
  MARK_AS_READ = 10;
  DELETE_MESSAGE = 11;
  DELETE_ACCOUNT = 12;
  RECEIVED_MESSAGE = 13;
  REQUEST_UNREAD_MESSAGES = 14;
  REQUEST_RECENT_MESSAGES = 15;
  CONFIRM_LOGIN = 16;
  GET_RECENT_MESSAGES = 17;
  GET_UNREAD_MESSAGES = 18;
  CONFIRM_MARK_AS_READ = 19;
  CONFIRM_SET_N_UNREAD_MESSAGES = 20;
  CONFIRM_SEND_MESSAGE = 21;
  CONFIRM_ECHO = 22;
}

// ---------- Request and Response Messages ----------

message LoginRequest {
  string username = 1;
  string password = 2;
}

message ConfirmLoginResponse {
  string username = 1;
  string message = 2;
  string status = 3;
}

message RegisterRequest {
  string username = 1;
  string password = 2;
}

message SuccessResponse {
  string message = 1;
  string status = 2;
}

message ErrorResponse {
  string message = 1;
  string status = 2;
}

message SendMessageRequest {
  string message = 1;
  string receiver = 2;
}

message ConfirmSendMessageResponse {
  string message = 1;
  string status = 2;
  string from = 3;
  string timestamp = 4;
}

message EchoRequest {
  string message = 1;
}

message ConfirmEchoResponse {
  string message = 1;
  string status = 2;
}

message ChatMessage {
  string message = 1;
  string timestamp = 2;
  string from = 3;
  int32 id = 4;
}

message RecentMessagesResponse {
  repeated ChatMessage messages = 1;
  string status = 2;
}

message UnreadMessagesResponse {
  repeated ChatMessage messages = 1;
  string status = 2;
}

message SetNUnreadMessagesRequest {
  string username = 1;
  int32 n_unread_messages = 2;
}

message MarkAsReadRequest {
  repeated int32 message_ids = 1;
}

message ConfirmMarkAsReadResponse {
  string message = 1;
  string status = 2;
}

message DeleteMessageRequest {
  string username = 1;
  int32 message_id = 2;
}

message DeleteAccountRequest {
  string username = 1;
}

message ReceivedMessage {
  string from = 1;
  string message = 2;
  string timestamp = 3;
  string read = 4;
  int32 id = 5;
  string username = 6;
}

// New: SubscribeRequest for receiving messages synchronously.
message SubscribeRequest {
  string username = 1;
}

message GetRecentMessagesRequest {
  string username = 1;
}

message GetUnreadMessagesRequest {
  string username = 1;
}


message GetUsersRequest {
  string username = 1; 
}

message GetUsersResponse {
  repeated string usernames = 1;
  string status = 2;
  string message = 3;
}

message SearchUsersRequest {
    string query = 1;
}

message SearchUsersResponse {
    repeated string usernames = 1;
    string status = 2;
    string message = 3;
}

// ---------- Service Definition ----------
service MessagingService {
  rpc Login(LoginRequest) returns (ConfirmLoginResponse);
  rpc Register(RegisterRequest) returns (SuccessResponse);
  rpc SendMessage(SendMessageRequest) returns (ConfirmSendMessageResponse);
  rpc Echo(EchoRequest) returns (ConfirmEchoResponse);
  rpc GetRecentMessages(GetRecentMessagesRequest) returns (RecentMessagesResponse);
  rpc GetUnreadMessages(GetUnreadMessagesRequest) returns (UnreadMessagesResponse);
  rpc SetNUnreadMessages(SetNUnreadMessagesRequest) returns (SuccessResponse);
  rpc MarkAsRead(MarkAsReadRequest) returns (ConfirmMarkAsReadResponse);
  rpc DeleteMessage(DeleteMessageRequest) returns (SuccessResponse);
  rpc DeleteAccount(DeleteAccountRequest) returns (SuccessResponse);
  rpc Subscribe(SubscribeRequest) returns (stream ReceivedMessage);
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse);

}
