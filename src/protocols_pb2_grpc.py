# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import protocols_pb2 as protocols__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in protocols_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MessagingServiceStub(object):
    """---------- Service Definition ----------
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/messaging.MessagingService/Login',
                request_serializer=protocols__pb2.LoginRequest.SerializeToString,
                response_deserializer=protocols__pb2.ConfirmLoginResponse.FromString,
                _registered_method=True)
        self.Register = channel.unary_unary(
                '/messaging.MessagingService/Register',
                request_serializer=protocols__pb2.RegisterRequest.SerializeToString,
                response_deserializer=protocols__pb2.SuccessResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/messaging.MessagingService/SendMessage',
                request_serializer=protocols__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=protocols__pb2.ConfirmSendMessageResponse.FromString,
                _registered_method=True)
        self.Echo = channel.unary_unary(
                '/messaging.MessagingService/Echo',
                request_serializer=protocols__pb2.EchoRequest.SerializeToString,
                response_deserializer=protocols__pb2.ConfirmEchoResponse.FromString,
                _registered_method=True)
        self.GetRecentMessages = channel.unary_unary(
                '/messaging.MessagingService/GetRecentMessages',
                request_serializer=protocols__pb2.GetRecentMessagesRequest.SerializeToString,
                response_deserializer=protocols__pb2.RecentMessagesResponse.FromString,
                _registered_method=True)
        self.GetUnreadMessages = channel.unary_unary(
                '/messaging.MessagingService/GetUnreadMessages',
                request_serializer=protocols__pb2.GetUnreadMessagesRequest.SerializeToString,
                response_deserializer=protocols__pb2.UnreadMessagesResponse.FromString,
                _registered_method=True)
        self.SetNUnreadMessages = channel.unary_unary(
                '/messaging.MessagingService/SetNUnreadMessages',
                request_serializer=protocols__pb2.SetNUnreadMessagesRequest.SerializeToString,
                response_deserializer=protocols__pb2.SuccessResponse.FromString,
                _registered_method=True)
        self.MarkAsRead = channel.unary_unary(
                '/messaging.MessagingService/MarkAsRead',
                request_serializer=protocols__pb2.MarkAsReadRequest.SerializeToString,
                response_deserializer=protocols__pb2.ConfirmMarkAsReadResponse.FromString,
                _registered_method=True)
        self.DeleteMessage = channel.unary_unary(
                '/messaging.MessagingService/DeleteMessage',
                request_serializer=protocols__pb2.DeleteMessageRequest.SerializeToString,
                response_deserializer=protocols__pb2.SuccessResponse.FromString,
                _registered_method=True)
        self.DeleteAccount = channel.unary_unary(
                '/messaging.MessagingService/DeleteAccount',
                request_serializer=protocols__pb2.DeleteAccountRequest.SerializeToString,
                response_deserializer=protocols__pb2.SuccessResponse.FromString,
                _registered_method=True)
        self.Subscribe = channel.unary_stream(
                '/messaging.MessagingService/Subscribe',
                request_serializer=protocols__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=protocols__pb2.ReceivedMessage.FromString,
                _registered_method=True)
        self.GetUsers = channel.unary_unary(
                '/messaging.MessagingService/GetUsers',
                request_serializer=protocols__pb2.GetUsersRequest.SerializeToString,
                response_deserializer=protocols__pb2.GetUsersResponse.FromString,
                _registered_method=True)


class MessagingServiceServicer(object):
    """---------- Service Definition ----------
    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Echo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecentMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUnreadMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNUnreadMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkAsRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAccount(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessagingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=protocols__pb2.LoginRequest.FromString,
                    response_serializer=protocols__pb2.ConfirmLoginResponse.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=protocols__pb2.RegisterRequest.FromString,
                    response_serializer=protocols__pb2.SuccessResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=protocols__pb2.SendMessageRequest.FromString,
                    response_serializer=protocols__pb2.ConfirmSendMessageResponse.SerializeToString,
            ),
            'Echo': grpc.unary_unary_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=protocols__pb2.EchoRequest.FromString,
                    response_serializer=protocols__pb2.ConfirmEchoResponse.SerializeToString,
            ),
            'GetRecentMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecentMessages,
                    request_deserializer=protocols__pb2.GetRecentMessagesRequest.FromString,
                    response_serializer=protocols__pb2.RecentMessagesResponse.SerializeToString,
            ),
            'GetUnreadMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUnreadMessages,
                    request_deserializer=protocols__pb2.GetUnreadMessagesRequest.FromString,
                    response_serializer=protocols__pb2.UnreadMessagesResponse.SerializeToString,
            ),
            'SetNUnreadMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNUnreadMessages,
                    request_deserializer=protocols__pb2.SetNUnreadMessagesRequest.FromString,
                    response_serializer=protocols__pb2.SuccessResponse.SerializeToString,
            ),
            'MarkAsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkAsRead,
                    request_deserializer=protocols__pb2.MarkAsReadRequest.FromString,
                    response_serializer=protocols__pb2.ConfirmMarkAsReadResponse.SerializeToString,
            ),
            'DeleteMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessage,
                    request_deserializer=protocols__pb2.DeleteMessageRequest.FromString,
                    response_serializer=protocols__pb2.SuccessResponse.SerializeToString,
            ),
            'DeleteAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAccount,
                    request_deserializer=protocols__pb2.DeleteAccountRequest.FromString,
                    response_serializer=protocols__pb2.SuccessResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=protocols__pb2.SubscribeRequest.FromString,
                    response_serializer=protocols__pb2.ReceivedMessage.SerializeToString,
            ),
            'GetUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=protocols__pb2.GetUsersRequest.FromString,
                    response_serializer=protocols__pb2.GetUsersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messaging.MessagingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('messaging.MessagingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MessagingService(object):
    """---------- Service Definition ----------
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/Login',
            protocols__pb2.LoginRequest.SerializeToString,
            protocols__pb2.ConfirmLoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/Register',
            protocols__pb2.RegisterRequest.SerializeToString,
            protocols__pb2.SuccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/SendMessage',
            protocols__pb2.SendMessageRequest.SerializeToString,
            protocols__pb2.ConfirmSendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/Echo',
            protocols__pb2.EchoRequest.SerializeToString,
            protocols__pb2.ConfirmEchoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecentMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/GetRecentMessages',
            protocols__pb2.GetRecentMessagesRequest.SerializeToString,
            protocols__pb2.RecentMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUnreadMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/GetUnreadMessages',
            protocols__pb2.GetUnreadMessagesRequest.SerializeToString,
            protocols__pb2.UnreadMessagesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetNUnreadMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/SetNUnreadMessages',
            protocols__pb2.SetNUnreadMessagesRequest.SerializeToString,
            protocols__pb2.SuccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MarkAsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/MarkAsRead',
            protocols__pb2.MarkAsReadRequest.SerializeToString,
            protocols__pb2.ConfirmMarkAsReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/DeleteMessage',
            protocols__pb2.DeleteMessageRequest.SerializeToString,
            protocols__pb2.SuccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/DeleteAccount',
            protocols__pb2.DeleteAccountRequest.SerializeToString,
            protocols__pb2.SuccessResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/messaging.MessagingService/Subscribe',
            protocols__pb2.SubscribeRequest.SerializeToString,
            protocols__pb2.ReceivedMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging.MessagingService/GetUsers',
            protocols__pb2.GetUsersRequest.SerializeToString,
            protocols__pb2.GetUsersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
