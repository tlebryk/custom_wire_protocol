syntax = "proto3";

package messaging;

// Define the action IDs as an enum. These can be useful if you need to route based on numeric IDs.
enum ActionIds {
  UNKNONE = 0;
  SUCCESS = 1;
  ERROR = 2;
  ECHO = 3;
  REGISTER = 4;
  LOGIN = 5;
  SEND_MESSAGE = 6;
  RECENT_MESSAGES = 7;
  UNREAD_MESSAGES = 8;
  SET_N_UNREAD_MESSAGES = 9;
  MARK_AS_READ = 10;
  DELETE_MESSAGE = 11;
  DELETE_ACCOUNT = 12;
  RECEIVED_MESSAGE = 13;
  REQUEST_UNREAD_MESSAGES = 14;
  REQUEST_RECENT_MESSAGES = 15;
  CONFIRM_LOGIN = 16;
  GET_RECENT_MESSAGES = 17;
  GET_UNREAD_MESSAGES = 18;
  CONFIRM_MARK_AS_READ = 19;
  CONFIRM_SET_N_UNREAD_MESSAGES = 20;
  CONFIRM_SEND_MESSAGE = 21;
  CONFIRM_ECHO = 22;
}

// ---------- Request and Response Messages ----------

// Login
message LoginRequest {
  string username = 1;
  string password = 2;
}

message ConfirmLoginResponse {
  string username = 1;
  string message = 2;
  string status = 3;
}

// Register
message RegisterRequest {
  string username = 1;
  string password = 2;
}

message SuccessResponse {
  string message = 1;
  string status = 2;
}

message ErrorResponse {
  string message = 1;
  string status = 2;
}

// Send Message
message SendMessageRequest {
  string message = 1;
  string receiver = 2;
}

message ConfirmSendMessageResponse {
  string message = 1;
  string status = 2;
  string from = 3;
  string timestamp = 4;
}

// Echo
message EchoRequest {
  string message = 1;
}

message ConfirmEchoResponse {
  string message = 1;
  string status = 2;
}

// Chat message type used in message lists
message ChatMessage {
  string message = 1;
  string timestamp = 2;
  string from = 3;
  int32 id = 4;
}

// Recent messages response
message RecentMessagesResponse {
  repeated ChatMessage messages = 1;
  string status = 2;
}

// Unread messages response
message UnreadMessagesResponse {
  repeated ChatMessage messages = 1;
  string status = 2;
}

// Set number of unread messages
message SetNUnreadMessagesRequest {
  string username = 1;
  int32 n_unread_messages = 2;
}

// Mark messages as read
message MarkAsReadRequest {
  repeated int32 message_ids = 1;
}

message ConfirmMarkAsReadResponse {
  string message = 1;
  string status = 2;
}

// Delete message
message DeleteMessageRequest {
  string username = 1;
  int32 message_id = 2;
}

// Delete account
message DeleteAccountRequest {
  string username = 1;
}

// Received message (could be used in a streaming RPC)
message ReceivedMessage {
  string from = 1;
  string message = 2;
  string timestamp = 3;
  string read = 4;
  int32 id = 5;
  string username = 6;
}

// Get recent messages
message GetRecentMessagesRequest {
  string username = 1;
}

// Get unread messages
message GetUnreadMessagesRequest {
  string username = 1;
}

// Confirm set n unread messages
message ConfirmSetNUnreadMessagesResponse {
  string message = 1;
  string status = 2;
}

// ---------- Service Definition ----------

service MessagingService {
  // Login RPC: Client sends LoginRequest and receives ConfirmLoginResponse.
  rpc Login(LoginRequest) returns (ConfirmLoginResponse);
  
  // Register RPC: Client sends RegisterRequest and receives SuccessResponse (or ErrorResponse on failure).
  rpc Register(RegisterRequest) returns (SuccessResponse);
  
  // Send message RPC
  rpc SendMessage(SendMessageRequest) returns (ConfirmSendMessageResponse);
  
  // Echo RPC
  rpc Echo(EchoRequest) returns (ConfirmEchoResponse);
  
  // Retrieve recent messages
  rpc GetRecentMessages(GetRecentMessagesRequest) returns (RecentMessagesResponse);
  
  // Retrieve unread messages
  rpc GetUnreadMessages(GetUnreadMessagesRequest) returns (UnreadMessagesResponse);
  
  // Set number of unread messages
  rpc SetNUnreadMessages(SetNUnreadMessagesRequest) returns (SuccessResponse);
  
  // Mark messages as read
  rpc MarkAsRead(MarkAsReadRequest) returns (ConfirmMarkAsReadResponse);
  
  // Delete a message
  rpc DeleteMessage(DeleteMessageRequest) returns (SuccessResponse);
  
  // Delete an account
  rpc DeleteAccount(DeleteAccountRequest) returns (SuccessResponse);

  // Optionally, you could define a server streaming RPC for pushing received messages:
  // rpc SubscribeToMessages(SubscribeRequest) returns (stream ReceivedMessage);
}
